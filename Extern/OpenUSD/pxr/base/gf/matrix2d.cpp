// Modified from the original OpenUSD file.
// Copyright 2024 Mihail Mladenov

//
// Copyright 2016 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// matrix2.template.cpp file to make changes.


#include "pxr/pxr.h"
#include "pxr/base/gf/matrix2d.h"
#include "pxr/base/gf/matrix2f.h"

#include "pxr/base/gf/math.h"
#include "pxr/base/gf/ostreamHelpers.h"
#include "pxr/base/tf/type.h"

#include <float.h>
#include <ostream>

PXR_NAMESPACE_OPEN_SCOPE

TF_REGISTRY_FUNCTION(TfType) {
    TfType::Define<Matrix2d>();
}

std::ostream&
operator<<(std::ostream& out, const Matrix2d& m)
{
    return out
        << "( ("
        << _OstreamHelperP(m[0][0]) << ", "
        << _OstreamHelperP(m[0][1])
        << "), ("
        << _OstreamHelperP(m[1][0]) << ", "
        << _OstreamHelperP(m[1][1])
        << ") )";
}

Matrix2d::Matrix2d(const Matrix2f& m)
{
    Set(m[0][0], m[0][1], 
        m[1][0], m[1][1]);
}

Matrix2d::Matrix2d(const std::vector< std::vector<double> >& v)
{
    double m[2][2] = {{1.0, 0.0},
                      {0.0, 1.0}};
    for(size_t row = 0; row < 2 && row < v.size(); ++row) {
        for (size_t col = 0; col < 2 && col < v[row].size(); ++col) {
            m[row][col] = v[row][col];
        }
    }
    Set(m);
}

Matrix2d::Matrix2d(const std::vector< std::vector<float> >& v)
{
    double m[2][2] = {{1.0, 0.0},
                      {0.0, 1.0}};
    for(size_t row = 0; row < 2 && row < v.size(); ++row) {
        for (size_t col = 0; col < 2 && col < v[row].size(); ++col) {
            m[row][col] = v[row][col];
        }
    }
    Set(m);
}


Matrix2d &
Matrix2d::SetDiagonal(double s)
{
    _mtx[0][0] = s;
    _mtx[0][1] = 0.0;
    _mtx[1][0] = 0.0;
    _mtx[1][1] = s;
    return *this;
}

Matrix2d &
Matrix2d::SetDiagonal(const Vec2d& v)
{
    _mtx[0][0] = v[0]; _mtx[0][1] = 0.0; 
    _mtx[1][0] = 0.0; _mtx[1][1] = v[1];
    return *this;
}

double *
Matrix2d::Get(double m[2][2]) const
{
    m[0][0] = _mtx[0][0];
    m[0][1] = _mtx[0][1];
    m[1][0] = _mtx[1][0];
    m[1][1] = _mtx[1][1];
    return &m[0][0];
}

bool
Matrix2d::operator ==(const Matrix2d &m) const
{
    return (_mtx[0][0] == m._mtx[0][0] &&
            _mtx[0][1] == m._mtx[0][1] &&
            _mtx[1][0] == m._mtx[1][0] &&
            _mtx[1][1] == m._mtx[1][1]);
}

bool
Matrix2d::operator ==(const Matrix2f &m) const
{
    return (_mtx[0][0] == m._mtx[0][0] &&
            _mtx[0][1] == m._mtx[0][1] &&
            _mtx[1][0] == m._mtx[1][0] &&
            _mtx[1][1] == m._mtx[1][1]);
}


Matrix2d
Matrix2d::GetTranspose() const
{
    Matrix2d transpose;
    transpose._mtx[0][0] = _mtx[0][0];
    transpose._mtx[1][0] = _mtx[0][1];
    transpose._mtx[0][1] = _mtx[1][0];
    transpose._mtx[1][1] = _mtx[1][1];

    return transpose;
}

Matrix2d
Matrix2d::GetInverse(double *detPtr, double eps) const
{
    double det = GetDeterminant();

    if (detPtr) {
        // CODE_COVERAGE_OFF_NO_REPORT This is inaccessible from script and not
        // worth writing a whole C++ test for.
	*detPtr = det;
        // CODE_COVERAGE_ON_NO_REPORT
    }

    Matrix2d inverse;

    if (Abs(det) > eps) {

        double rcp = 1.0 / det;
        inverse._mtx[0][0] = _mtx[1][1]*rcp;
        inverse._mtx[0][1] = _mtx[0][1]*-rcp;
        inverse._mtx[1][0] = _mtx[1][0]*-rcp;
        inverse._mtx[1][1] = _mtx[0][0]*rcp;
    }
    else {
	inverse.SetDiagonal(FLT_MAX);
    }

    return inverse;

}

double
Matrix2d::GetDeterminant() const
{
    return (_mtx[0][0] * _mtx[1][1] - _mtx[0][1] * _mtx[1][0]);
}

/*
** Scaling
*/
Matrix2d&
Matrix2d::operator*=(double d)
{
    _mtx[0][0] *= d; _mtx[0][1] *= d; 
    _mtx[1][0] *= d; _mtx[1][1] *= d;
    return *this;
}

/*
** Addition
*/
Matrix2d &
Matrix2d::operator+=(const Matrix2d &m)
{
    _mtx[0][0] += m._mtx[0][0];
    _mtx[0][1] += m._mtx[0][1];
    _mtx[1][0] += m._mtx[1][0];
    _mtx[1][1] += m._mtx[1][1];
    return *this;
}

/*
** Subtraction
*/
Matrix2d &
Matrix2d::operator-=(const Matrix2d &m)
{
    _mtx[0][0] -= m._mtx[0][0];
    _mtx[0][1] -= m._mtx[0][1];
    _mtx[1][0] -= m._mtx[1][0];
    _mtx[1][1] -= m._mtx[1][1];
    return *this;
}

/*
** Negation
*/
Matrix2d
operator -(const Matrix2d& m)
{
    return
        Matrix2d(-m._mtx[0][0], -m._mtx[0][1], 
                   -m._mtx[1][0], -m._mtx[1][1]);
}

Matrix2d &
Matrix2d::operator*=(const Matrix2d &m)
{
    // Save current values before they are overwritten
    Matrix2d tmp = *this;

    _mtx[0][0] = tmp._mtx[0][0] * m._mtx[0][0] +
                 tmp._mtx[0][1] * m._mtx[1][0];

    _mtx[0][1] = tmp._mtx[0][0] * m._mtx[0][1] +
                 tmp._mtx[0][1] * m._mtx[1][1];

    _mtx[1][0] = tmp._mtx[1][0] * m._mtx[0][0] +
                 tmp._mtx[1][1] * m._mtx[1][0];

    _mtx[1][1] = tmp._mtx[1][0] * m._mtx[0][1] +
                 tmp._mtx[1][1] * m._mtx[1][1];

    return *this;
}


bool
IsClose(Matrix2d const &m1, Matrix2d const &m2, double tolerance)
{
    for(size_t row = 0; row < 2; ++row) {
        for(size_t col = 0; col < 2; ++col) {
            if(!IsClose(m1[row][col], m2[row][col], tolerance))
                return false;
        }
    }
    return true;
}


PXR_NAMESPACE_CLOSE_SCOPE
