// Modified from the original OpenUSD file.
// Copyright 2024 Mihail Mladenov

//
// Copyright 2021 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// dualQuat.template.cpp file to make changes.

#include "pxr/pxr.h"
#include "pxr/base/gf/dualQuath.h"
#include "pxr/base/gf/ostreamHelpers.h"
#include "pxr/base/tf/type.h"

#include "pxr/base/gf/dualQuatd.h"
#include "pxr/base/gf/dualQuatf.h"

PXR_NAMESPACE_OPEN_SCOPE

TF_REGISTRY_FUNCTION(TfType) {
    TfType::Define<DualQuath>();
}

DualQuath::DualQuath(const DualQuatd &other)
    : _real(other.GetReal()) , _dual(other.GetDual())
{
}
DualQuath::DualQuath(const DualQuatf &other)
    : _real(other.GetReal()) , _dual(other.GetDual())
{
}

std::pair<Half, Half>
DualQuath::GetLength() const
{
    const Half realLength = _real.GetLength();

    if (realLength == 0)
        return std::pair<Half, Half>{0, 0};

    return std::pair<Half, Half>{ realLength, Dot(_real, _dual)/realLength };
}

DualQuath
DualQuath::GetNormalized(Half eps) const
{
    DualQuath dq(*this);
    dq.Normalize(eps);

    return dq;
}

std::pair<Half, Half>
DualQuath::Normalize(Half eps)
{
    const std::pair<Half, Half> length = GetLength();
    const Half realLength = length.first;

    if (realLength < eps) {
        (*this) = DualQuath::GetIdentity();
    } else {
        const Half invRealLength = 1.0 / realLength;
        _real *= invRealLength;
        _dual *= invRealLength;

        _dual -= (Dot(_real, _dual) * _real);
    }

    return length;
}

DualQuath
DualQuath::GetConjugate() const
{
    return DualQuath( _real.GetConjugate(), _dual.GetConjugate() );
}

DualQuath
DualQuath::GetInverse() const
{
    // DQ * DQ.GetInverse() == GetIdentity()
    const Half realLengthSqr = Dot(_real, _real);

    if ( realLengthSqr <= 0.0 )
        return DualQuath::GetIdentity();

    const Half invRealLengthSqr = 1.0 / realLengthSqr;
    const DualQuath conjInvLenSqr = GetConjugate() * invRealLengthSqr;
    const Quath realPart = conjInvLenSqr.GetReal();
    const Quath dualPart = conjInvLenSqr.GetDual() -
        (2.0 * invRealLengthSqr * Dot(_real, _dual) * conjInvLenSqr.GetReal());

    return DualQuath( realPart, dualPart );
}

void
DualQuath::SetTranslation( const Vec3h &translation )
{
    // compute and set the dual part
    _dual = Quath( 0.0, 0.5*translation ) * _real;
}

Vec3h
DualQuath::GetTranslation() const
{
    // _dual = Quath(0, 0.5*translation) * _real
    // => translation = 2 * (_dual * _real.GetConjugate()).GetImaginary()

    // Assume that this dual quaternion is normalized
    TF_DEV_AXIOM(IsClose(_real.GetLength(), 1.0, 0.001));
    const Half r1 = _dual.GetReal();
    const Half r2 = _real.GetReal();
    const Vec3h &i1 = _dual.GetImaginary();
    const Vec3h &i2 = _real.GetImaginary();

    // Translation of the dual quaternion: -2.0 * (r1*i2 - r2*i1 + i1^i2)
    return Vec3h( -2.0*(r1*i2[0] - r2*i1[0] + (i1[1]*i2[2] - i1[2]*i2[1])),
                               -2.0*(r1*i2[1] - r2*i1[1] + (i1[2]*i2[0] - i1[0]*i2[2])),
                               -2.0*(r1*i2[2] - r2*i1[2] + (i1[0]*i2[1] - i1[1]*i2[0])) );
}

DualQuath &
DualQuath::operator *=(const DualQuath &dq)
{
    const Quath tempReal = GetReal() * dq.GetReal();
    const Quath tempDual = GetReal() * dq.GetDual() + GetDual() * dq.GetReal();

    SetReal(tempReal);
    SetDual(tempDual);

    return *this;
}

Vec3h
DualQuath::Transform(const Vec3h &vec) const
{
    // Apply rotation and translation
    return GetReal().Transform(vec) + GetTranslation();
}

std::ostream &
operator<<(std::ostream &out, const DualQuath &dq)
{
    return(out << '(' << _OstreamHelperP(dq.GetReal()) << ", "
           << _OstreamHelperP(dq.GetDual()) << ')');
}

PXR_NAMESPACE_CLOSE_SCOPE
