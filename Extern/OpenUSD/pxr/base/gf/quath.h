//
// Modified from the original ->  prefix removed.

// Copyright 2016 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// quat.template.h file to make changes.

#ifndef PXR_BASE_GF_QUATH_H
#define PXR_BASE_GF_QUATH_H

/// \file gf/quath.h
/// \ingroup group_gf_LinearAlgebra

#include "pxr/pxr.h"
#include "pxr/base/gf/api.h"
#include "pxr/base/gf/declare.h"
#include "pxr/base/gf/vec3h.h"
#include "pxr/base/gf/traits.h"
#include "pxr/base/gf/half.h"
#include "pxr/base/tf/hash.h"

#include <iosfwd>

PXR_NAMESPACE_OPEN_SCOPE

template <>
struct IsQuat<class Quath> { static const bool value = true; };


/// Return the dot (inner) product of two quaternions.
Half Dot(const Quath& q1, const Quath& q2);


/// \class Quath
/// \ingroup group_gf_LinearAlgebra
///
/// Basic type: a quaternion, a complex number with a real coefficient and
/// three imaginary coefficients, stored as a 3-vector.
///
class Quath
{
  public:
    typedef Half ScalarType;
    typedef Vec3h ImaginaryType;

    /// Default constructor leaves the quaternion undefined.
    Quath() {}

    /// Initialize the real coefficient to \p realVal and the imaginary
    /// coefficients to zero.
    ///
    /// Since quaternions typically must be normalized, reasonable values for
    /// \p realVal are -1, 0, or 1.  Other values are legal but are likely to
    /// be meaningless.
    ///
    explicit Quath (Half realVal) : _imaginary(0), _real(realVal) {}

    /// Initialize the real and imaginary coefficients.
    Quath(Half real, Half i, Half j, Half k)
        : _imaginary(i, j, k), _real(real)
    {
    }

    /// Initialize the real and imaginary coefficients.
    Quath(Half real, const Vec3h &imaginary)
        : _imaginary(imaginary), _real(real)
    {
    }

    /// Construct from Quatd.
    GF_API
    explicit Quath(class Quatd const &other);
    /// Construct from Quatf.
    GF_API
    explicit Quath(class Quatf const &other);

    /// Return the zero quaternion, with real coefficient 0 and an
    /// imaginary coefficients all zero.
    static Quath GetZero() { return Quath(0.0); }

    /// Return the identity quaternion, with real coefficient 1 and an
    /// imaginary coefficients all zero.
    static Quath GetIdentity() { return Quath(1.0); }

    /// Return the real coefficient.
    Half GetReal() const { return _real; }

    /// Set the real coefficient.
    void SetReal(Half real) { _real = real; }

    /// Return the imaginary coefficient.
    const Vec3h &GetImaginary() const { return _imaginary; }

    /// Set the imaginary coefficients.
    void SetImaginary(const Vec3h &imaginary) {
        _imaginary = imaginary;
    }

    /// Set the imaginary coefficients.
    void SetImaginary(Half i, Half j, Half k) {
        _imaginary.Set(i, j, k);
    }

    /// Return geometric length of this quaternion.
    Half GetLength() const { return Sqrt(_GetLengthSquared()); }

    /// length of this quaternion is smaller than \p eps, return the identity
    /// quaternion.
    Quath
    GetNormalized(Half eps = GF_MIN_VECTOR_LENGTH) const {
        Quath ret(*this);
        ret.Normalize(eps);
        return ret;
    }

    /// Normalizes this quaternion in place to unit length, returning the
    /// length before normalization. If the length of this quaternion is
    /// smaller than \p eps, this sets the quaternion to identity.
    GF_API
    Half Normalize(Half eps = GF_MIN_VECTOR_LENGTH);

    /// Return this quaternion's conjugate, which is the quaternion with the
    /// same real coefficient and negated imaginary coefficients.
    Quath GetConjugate() const {
        return Quath(GetReal(), -GetImaginary());
    }

    /// Return this quaternion's inverse, or reciprocal.  This is the
    /// quaternion's conjugate divided by it's squared length.
    Quath GetInverse() const {
        return GetConjugate() / _GetLengthSquared();
    }

    /// Transform the Vec3h point. If the quaternion is normalized,
    /// the transformation is a rotation. Given a Quath q, q.Transform(point)
    /// is equivalent to:
    ///
    ///     (q * Quath(0, point) * q.GetInverse()).GetImaginary()
    ///
    /// but is more efficient.
    GF_API
    Vec3h Transform(const Vec3h& point) const;

    /// Hash.
    friend inline size_t hash_value(const Quath &q) {
        return TfHash::Combine(q.GetReal(), q.GetImaginary());
    }

    /// Component-wise negation.
    Quath operator-() const {
        return Quath(-GetReal(), -GetImaginary());
    }

    /// Component-wise quaternion equality test. The real and imaginary parts
    /// must match exactly for quaternions to be considered equal.
    bool operator==(const Quath &q) const {
        return (GetReal() == q.GetReal() &&
                GetImaginary() == q.GetImaginary());
    }

    /// Component-wise quaternion inequality test. The real and imaginary
    /// parts must match exactly for quaternions to be considered equal.
    bool operator!=(const Quath &q) const {
        return !(*this == q);
    }

    /// Post-multiply quaternion \p q into this quaternion.
    GF_API
    Quath &operator *=(const Quath &q);

    /// Multiply this quaternion's coefficients by \p s.
    Quath &operator *=(Half s) {
        _real *= s;
        _imaginary *= s;
        return *this;
    }

    /// Divide this quaternion's coefficients by \p s.
    Quath &operator /=(Half s) {
        _real /= s;
        _imaginary /= s;
        return *this;
    }

    /// Add quaternion \p q to this quaternion.
    Quath &operator +=(const Quath &q) {
        _real += q._real;
        _imaginary += q._imaginary;
        return *this;
    }

    /// Component-wise unary difference operator.
    Quath &operator -=(const Quath &q)  {
        _real -= q._real;
        _imaginary -= q._imaginary;
        return *this;
    }

    /// Component-wise binary sum operator.
    friend Quath
    operator +(const Quath &q1, const Quath &q2) {
        return Quath(q1) += q2;
    }

    /// Component-wise binary difference operator.
    friend Quath
    operator -(const Quath &q1, const Quath &q2) {
        return Quath(q1) -= q2;
    }

    /// Returns the product of quaternions \p q1 and \p q2.
    friend Quath
    operator *(const Quath &q1, const Quath &q2) {
        return Quath(q1) *= q2;
    }

    /// Returns the product of quaternion \p q and scalar \p s.
    friend Quath
    operator *(const Quath &q, Half s) {
        return Quath(q) *= s;
    }

    /// Returns the product of quaternion \p q and scalar \p s.
    friend Quath
    operator *(Half s, const Quath &q) {
        return Quath(q) *= s;
    }

    /// Returns the product of quaternion \p q and scalar 1 / \p s.
    friend Quath
    operator /(const Quath &q, Half s) {
        return Quath(q) /= s;
    }

  private:
    /// Imaginary part
    Vec3h _imaginary;

    /// Real part
    Half _real;

    /// Returns the square of the length
    Half
    _GetLengthSquared() const {
        return Dot(*this, *this);
    }
};

/// Spherically linearly interpolate between \p q0 and \p q1.
///
/// If the interpolant \p alpha is zero, then the result is \p q0, while
/// \p alpha of one yields \p q1.
GF_API Quath
Slerp(double alpha, const Quath& q0, const Quath& q1);

GF_API Quath
Slerp(const Quath& q0, const Quath& q1, double alpha);

inline Half
Dot(Quath const &q1, Quath const &q2) {
    return Dot(q1.GetImaginary(), q2.GetImaginary()) +
                 q1.GetReal()*q2.GetReal();
}

/// Output a Quatd using the format (re, i, j, k)
/// \ingroup group_gf_DebuggingOutput
GF_API std::ostream& operator<<(std::ostream &, Quath const &);

PXR_NAMESPACE_CLOSE_SCOPE

#endif // PXR_BASE_GF_QUATH_H
