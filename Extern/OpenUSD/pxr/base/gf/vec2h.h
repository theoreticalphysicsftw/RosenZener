// Modified from original OpenUSD file.
// Copyright 2024 Mihail Mladenov

// Copyright 2016 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// vec.template.h file to make changes.

#ifndef PXR_BASE_GF_VEC2H_H
#define PXR_BASE_GF_VEC2H_H

/// \file gf/vec2h.h
/// \ingroup group_gf_LinearAlgebra

#include "pxr/pxr.h"
#include "pxr/base/tf/diagnostic.h"
#include "pxr/base/gf/api.h"
#include "pxr/base/gf/limits.h"
#include "pxr/base/gf/traits.h"
#include "pxr/base/gf/math.h"
#include "pxr/base/gf/half.h"
#include "pxr/base/tf/hash.h"

#include <cstddef>
#include <cmath>

#include <iosfwd>

PXR_NAMESPACE_OPEN_SCOPE

class Vec2h;

template <>
struct IsVec<class Vec2h> { static const bool value = true; };

/// \class Vec2h
/// \ingroup group_gf_LinearAlgebra
///
/// Basic type for a vector of 2 Half components.
///
/// Represents a vector of 2 components of type \c Half.
/// It is intended to be fast and simple.
///
class Vec2h
{
public:
    /// Scalar element type and dimension.
    typedef Half ScalarType;
    static const size_t dimension = 2;

    /// Default constructor does no initialization.
    Vec2h() = default;

    /// Initialize all elements to a single value.
    constexpr explicit Vec2h(Half value)
        : _data{ value, value }
    {
    }

    /// Initialize all elements with explicit arguments.
    constexpr Vec2h(Half s0, Half s1)
        : _data{ s0, s1 }
    {
    }

    /// Construct with pointer to values.
    template <class Scl>
    constexpr explicit Vec2h(Scl const *p)
        : _data{ p[0], p[1] }
    {
    }

    /// Construct from Vec2d.
    explicit Vec2h(class Vec2d const &other);

    /// Construct from Vec2f.
    explicit Vec2h(class Vec2f const &other);

    /// Implicitly convert from Vec2i.
    Vec2h(class Vec2i const &other);
 
    /// Create a unit vector along the X-axis.
    static Vec2h XAxis() {
        Vec2h result(0);
        result[0] = 1;
        return result;
    }
    /// Create a unit vector along the Y-axis.
    static Vec2h YAxis() {
        Vec2h result(0);
        result[1] = 1;
        return result;
    }

    /// Create a unit vector along the i-th axis, zero-based.  Return the zero
    /// vector if \p i is greater than or equal to 2.
    static Vec2h Axis(size_t i) {
        Vec2h result(0);
        if (i < 2)
            result[i] = 1;
        return result;
    }

    /// Set all elements with passed arguments.
    Vec2h &Set(Half s0, Half s1) {
        _data[0] = s0;
        _data[1] = s1;
        return *this;
    }

    /// Set all elements with a pointer to data.
    Vec2h &Set(Half const *a) {
        return Set(a[0], a[1]);
    }

    /// Direct data access.
    Half const *data() const { return _data; }
    Half *data() { return _data; }
    Half const *GetArray() const { return data(); }

    /// Indexing.
    Half const &operator[](size_t i) const { return _data[i]; }
    Half &operator[](size_t i) { return _data[i]; }

    /// Hash.
    friend inline size_t hash_value(Vec2h const &vec) {
        return TfHash::Combine(vec[0], vec[1]);
    }

    /// Equality comparison.
    bool operator==(Vec2h const &other) const {
        return _data[0] == other[0] &&
               _data[1] == other[1];
    }
    bool operator!=(Vec2h const &other) const {
        return !(*this == other);
    }

    // TODO Add inequality for other vec types...
    /// Equality comparison.
    GF_API
    bool operator==(class Vec2d const &other) const;
    /// Equality comparison.
    GF_API
    bool operator==(class Vec2f const &other) const;
    /// Equality comparison.
    GF_API
    bool operator==(class Vec2i const &other) const;
    
    /// Create a vec with negated elements.
    Vec2h operator-() const {
        return Vec2h(-_data[0], -_data[1]);
    }

    /// Addition.
    Vec2h &operator+=(Vec2h const &other) {
        _data[0] += other[0];
        _data[1] += other[1];
        return *this;
    }
    friend Vec2h operator+(Vec2h const &l, Vec2h const &r) {
        return Vec2h(l) += r;
    }

    /// Subtraction.
    Vec2h &operator-=(Vec2h const &other) {
        _data[0] -= other[0];
        _data[1] -= other[1];
        return *this;
    }
    friend Vec2h operator-(Vec2h const &l, Vec2h const &r) {
        return Vec2h(l) -= r;
    }

    /// Multiplication by scalar.
    Vec2h &operator*=(double s) {
        _data[0] *= s;
        _data[1] *= s;
        return *this;
    }
    Vec2h operator*(double s) const {
        return Vec2h(*this) *= s;
    }
    friend Vec2h operator*(double s, Vec2h const &v) {
        return v * s;
    }

        /// Division by scalar.
    // TODO should divide by the scalar type.
    Vec2h &operator/=(double s) {
        // TODO This should not multiply by 1/s, it should do the division.
        // Doing the division is more numerically stable when s is close to
        // zero.
        return *this *= (1.0 / s);
    }
    Vec2h operator/(double s) const {
        return *this * (1.0 / s);
    }
    
    /// See Dot().
    Half operator*(Vec2h const &v) const {
        return _data[0] * v[0] + _data[1] * v[1];
    }

    /// Returns the projection of \p this onto \p v. That is:
    /// \code
    /// v * (*this * v)
    /// \endcode
    Vec2h GetProjection(Vec2h const &v) const {
        return v * (*this * v);
    }

    /// Returns the orthogonal complement of \p this->GetProjection(b).
    /// That is:
    /// \code
    ///  *this - this->GetProjection(b)
    /// \endcode
    Vec2h GetComplement(Vec2h const &b) const {
        return *this - this->GetProjection(b);
    }

    /// Squared length.
    Half GetLengthSq() const {
        return *this * *this;
    }

    /// Length
    Half GetLength() const {
        return Sqrt(GetLengthSq());
    }

    /// Normalizes the vector in place to unit length, returning the
    /// length before normalization. If the length of the vector is
    /// smaller than \p eps, then the vector is set to vector/\c eps.
    /// The original length of the vector is returned. See also Normalize().
    ///
    /// \todo This was fixed for bug 67777. This is a gcc64 optimizer bug.
    /// By tickling the code, it no longer tries to write into
    /// an illegal memory address (in the code section of memory).
    Half Normalize(Half eps = 0.001) {
        // TODO this seems suspect...  suggest dividing by length so long as
        // length is not zero.
        Half length = GetLength();
        *this /= (length > eps) ? length : eps;
        return length;
    }

    Vec2h GetNormalized(Half eps = 0.001) const {
        Vec2h normalized(*this);
        normalized.Normalize(eps);
        return normalized;
    }

  
private:
    Half _data[2];
};

/// Output a Vec2h.
/// \ingroup group_gf_DebuggingOutput
GF_API std::ostream& operator<<(std::ostream &, Vec2h const &);


PXR_NAMESPACE_CLOSE_SCOPE

#include "pxr/base/gf/vec2d.h"
#include "pxr/base/gf/vec2f.h"
#include "pxr/base/gf/vec2i.h"

PXR_NAMESPACE_OPEN_SCOPE

inline
Vec2h::Vec2h(class Vec2d const &other)
{
    _data[0] = other[0];
    _data[1] = other[1];
}
inline
Vec2h::Vec2h(class Vec2f const &other)
{
    _data[0] = other[0];
    _data[1] = other[1];
}
inline
Vec2h::Vec2h(class Vec2i const &other)
{
    _data[0] = other[0];
    _data[1] = other[1];
}

/// Returns component-wise multiplication of vectors \p v1 and \p v2.
inline Vec2h
CompMult(Vec2h const &v1, Vec2h const &v2) {
    return Vec2h(
        v1[0] * v2[0],
        v1[1] * v2[1]
        );
}

/// Returns component-wise quotient of vectors \p v1 and \p v2.
inline Vec2h
CompDiv(Vec2h const &v1, Vec2h const &v2) {
    return Vec2h(
        v1[0] / v2[0],
        v1[1] / v2[1]
        );
}

/// Returns the dot (inner) product of two vectors.
inline Half
Dot(Vec2h const &v1, Vec2h const &v2) {
    return v1 * v2;
}


/// Returns the geometric length of \c v.
inline Half
GetLength(Vec2h const &v)
{
    return v.GetLength();
}

/// Normalizes \c *v in place to unit length, returning the length before
/// normalization. If the length of \c *v is smaller than \p eps then \c *v is
/// set to \c *v/eps.  The original length of \c *v is returned.
inline Half
Normalize(Vec2h *v, Half eps = 0.001)
{
    return v->Normalize(eps);
}

/// Returns a normalized (unit-length) vector with the same direction as \p v.
/// If the length of this vector is smaller than \p eps, the vector divided by
/// \p eps is returned.
inline Vec2h
GetNormalized(Vec2h const &v, Half eps = 0.001)
{
    return v.GetNormalized(eps);
}

/// Returns the projection of \p a onto \p b. That is:
/// \code
/// b * (a * b)
/// \endcode
inline Vec2h
GetProjection(Vec2h const &a, Vec2h const &b)
{
    return a.GetProjection(b);
}

/// Returns the orthogonal complement of \p a.GetProjection(b). That is:
/// \code
///  a - a.GetProjection(b)
/// \endcode
inline Vec2h
GetComplement(Vec2h const &a, Vec2h const &b)
{
    return a.GetComplement(b);
}

/// Tests for equality within a given tolerance, returning \c true if the
/// length of the difference vector is less than or equal to \p tolerance.
inline bool
IsClose(Vec2h const &v1, Vec2h const &v2, double tolerance)
{
    Vec2h delta = v1 - v2;
    return delta.GetLengthSq() <= tolerance * tolerance;
}

 
 
PXR_NAMESPACE_CLOSE_SCOPE

#endif // PXR_BASE_GF_VEC2H_H
