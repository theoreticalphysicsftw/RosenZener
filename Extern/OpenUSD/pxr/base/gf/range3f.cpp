// Modified from the original OpenUSD file.
// Copyright 2024 Mihail Mladenov

//
// Copyright 2016 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// range.template.cpp file to make changes.

#include "pxr/base/gf/range3f.h"
#include "pxr/base/gf/range3d.h"

#include "pxr/base/gf/math.h"
#include "pxr/base/gf/ostreamHelpers.h"
#include "pxr/base/tf/type.h"

#include <cfloat>
#include <ostream>

PXR_NAMESPACE_OPEN_SCOPE

TF_REGISTRY_FUNCTION(TfType) {
    TfType::Define<Range3f>();
}

std::ostream& 
operator<<(std::ostream &out, Range3f const &r)
{
    return out << '[' 
               << _OstreamHelperP(r.GetMin()) << "..." 
               << _OstreamHelperP(r.GetMax())
               << ']';
}

Range3f::Range3f(class Range3d const &other)
    : _min( Vec3f(other.GetMin()))
    , _max( Vec3f(other.GetMax()))
{
}

double
Range3f::GetDistanceSquared(const Vec3f &p) const
{
    double dist = 0.0;

    if (p[0] < _min[0]) {
	// p is left of box
	dist += Sqr(_min[0] - p[0]);
    }
    else if (p[0] > _max[0]) {
	// p is right of box
	dist += Sqr(p[0] - _max[0]);
    }
    if (p[1] < _min[1]) {
	// p is front of box
	dist += Sqr(_min[1] - p[1]);
    }
    else if (p[1] > _max[1]) {
	// p is back of box
	dist += Sqr(p[1] - _max[1]);
    }
    if (p[2] < _min[2]) {
	// p is below of box
	dist += Sqr(_min[2] - p[2]);
    }
    else if (p[2] > _max[2]) {
	// p is above of box
	dist += Sqr(p[2] - _max[2]);
    }

    return dist;
}

Vec3f
Range3f::GetCorner(size_t i) const
{
    if (i > 7) {
        TF_CODING_ERROR("Invalid corner %zu > 7.", i);
        return _min;
    }
    return Vec3f(
        (i & 1 ? _max : _min)[0],
        (i & 2 ? _max : _min)[1],
        (i & 4 ? _max : _min)[2]);
}

Range3f
Range3f::GetOctant(size_t i) const
{
    if (i > 7) {
        TF_CODING_ERROR("Invalid octant %zu > 7.", i);
        return Range3f();
    }

    Vec3f a = GetCorner(i);
    Vec3f b = .5 * (_min + _max);

    return Range3f(
        Vec3f(Min(a[0], b[0]), Min(a[1], b[1]), Min(a[2], b[2])),
        Vec3f(Max(a[0], b[0]), Max(a[1], b[1]), Max(a[2], b[2])));
}

const Range3f Range3f::UnitCube(Vec3f(0,0,0), Vec3f(1,1,1));

PXR_NAMESPACE_CLOSE_SCOPE
