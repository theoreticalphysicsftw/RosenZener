// Modified from the original OpenUSD file.
// Copyright 2024 Mihail Mladenov

// Copyright 2016 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// quat.template.h file to make changes.

#ifndef PXR_BASE_GF_QUATD_H
#define PXR_BASE_GF_QUATD_H

/// \file gf/quatd.h
/// \ingroup group_gf_LinearAlgebra

#include "pxr/pxr.h"
#include "pxr/base/gf/api.h"
#include "pxr/base/gf/declare.h"
#include "pxr/base/gf/vec3d.h"
#include "pxr/base/gf/traits.h"
#include "pxr/base/tf/hash.h"

#include <iosfwd>

PXR_NAMESPACE_OPEN_SCOPE

template <>
struct IsQuat<class Quatd> { static const bool value = true; };


/// Return the dot (inner) product of two quaternions.
double Dot(const Quatd& q1, const Quatd& q2);


/// \class Quatd
/// \ingroup group_gf_LinearAlgebra
///
/// Basic type: a quaternion, a complex number with a real coefficient and
/// three imaginary coefficients, stored as a 3-vector.
///
class Quatd
{
  public:
    typedef double ScalarType;
    typedef Vec3d ImaginaryType;

    /// Default constructor leaves the quaternion undefined.
    Quatd() {}

    /// Initialize the real coefficient to \p realVal and the imaginary
    /// coefficients to zero.
    ///
    /// Since quaternions typically must be normalized, reasonable values for
    /// \p realVal are -1, 0, or 1.  Other values are legal but are likely to
    /// be meaningless.
    ///
    explicit Quatd (double realVal) : _imaginary(0), _real(realVal) {}

    /// Initialize the real and imaginary coefficients.
    Quatd(double real, double i, double j, double k)
        : _imaginary(i, j, k), _real(real)
    {
    }

    /// Initialize the real and imaginary coefficients.
    Quatd(double real, const Vec3d &imaginary)
        : _imaginary(imaginary), _real(real)
    {
    }

    /// Implicitly convert from Quatf.
    GF_API
    Quatd(class Quatf const &other);
    /// Implicitly convert from Quath.
    GF_API
    Quatd(class Quath const &other);

    /// Return the zero quaternion, with real coefficient 0 and an
    /// imaginary coefficients all zero.
    static Quatd GetZero() { return Quatd(0.0); }

    /// Return the identity quaternion, with real coefficient 1 and an
    /// imaginary coefficients all zero.
    static Quatd GetIdentity() { return Quatd(1.0); }

    /// Return the real coefficient.
    double GetReal() const { return _real; }

    /// Set the real coefficient.
    void SetReal(double real) { _real = real; }

    /// Return the imaginary coefficient.
    const Vec3d &GetImaginary() const { return _imaginary; }

    /// Set the imaginary coefficients.
    void SetImaginary(const Vec3d &imaginary) {
        _imaginary = imaginary;
    }

    /// Set the imaginary coefficients.
    void SetImaginary(double i, double j, double k) {
        _imaginary.Set(i, j, k);
    }

    /// Return geometric length of this quaternion.
    double GetLength() const { return Sqrt(_GetLengthSquared()); }

    /// length of this quaternion is smaller than \p eps, return the identity
    /// quaternion.
    Quatd
    GetNormalized(double eps = GF_MIN_VECTOR_LENGTH) const {
        Quatd ret(*this);
        ret.Normalize(eps);
        return ret;
    }

    /// Normalizes this quaternion in place to unit length, returning the
    /// length before normalization. If the length of this quaternion is
    /// smaller than \p eps, this sets the quaternion to identity.
    GF_API
    double Normalize(double eps = GF_MIN_VECTOR_LENGTH);

    /// Return this quaternion's conjugate, which is the quaternion with the
    /// same real coefficient and negated imaginary coefficients.
    Quatd GetConjugate() const {
        return Quatd(GetReal(), -GetImaginary());
    }

    /// Return this quaternion's inverse, or reciprocal.  This is the
    /// quaternion's conjugate divided by it's squared length.
    Quatd GetInverse() const {
        return GetConjugate() / _GetLengthSquared();
    }

    /// Transform the Vec3d point. If the quaternion is normalized,
    /// the transformation is a rotation. Given a Quatd q, q.Transform(point)
    /// is equivalent to:
    ///
    ///     (q * Quatd(0, point) * q.GetInverse()).GetImaginary()
    ///
    /// but is more efficient.
    GF_API
    Vec3d Transform(const Vec3d& point) const;

    /// Hash.
    friend inline size_t hash_value(const Quatd &q) {
        return TfHash::Combine(q.GetReal(), q.GetImaginary());
    }

    /// Component-wise negation.
    Quatd operator-() const {
        return Quatd(-GetReal(), -GetImaginary());
    }

    /// Component-wise quaternion equality test. The real and imaginary parts
    /// must match exactly for quaternions to be considered equal.
    bool operator==(const Quatd &q) const {
        return (GetReal() == q.GetReal() &&
                GetImaginary() == q.GetImaginary());
    }

    /// Component-wise quaternion inequality test. The real and imaginary
    /// parts must match exactly for quaternions to be considered equal.
    bool operator!=(const Quatd &q) const {
        return !(*this == q);
    }

    /// Post-multiply quaternion \p q into this quaternion.
    GF_API
    Quatd &operator *=(const Quatd &q);

    /// Multiply this quaternion's coefficients by \p s.
    Quatd &operator *=(double s) {
        _real *= s;
        _imaginary *= s;
        return *this;
    }

    /// Divide this quaternion's coefficients by \p s.
    Quatd &operator /=(double s) {
        _real /= s;
        _imaginary /= s;
        return *this;
    }

    /// Add quaternion \p q to this quaternion.
    Quatd &operator +=(const Quatd &q) {
        _real += q._real;
        _imaginary += q._imaginary;
        return *this;
    }

    /// Component-wise unary difference operator.
    Quatd &operator -=(const Quatd &q)  {
        _real -= q._real;
        _imaginary -= q._imaginary;
        return *this;
    }

    /// Component-wise binary sum operator.
    friend Quatd
    operator +(const Quatd &q1, const Quatd &q2) {
        return Quatd(q1) += q2;
    }

    /// Component-wise binary difference operator.
    friend Quatd
    operator -(const Quatd &q1, const Quatd &q2) {
        return Quatd(q1) -= q2;
    }

    /// Returns the product of quaternions \p q1 and \p q2.
    friend Quatd
    operator *(const Quatd &q1, const Quatd &q2) {
        return Quatd(q1) *= q2;
    }

    /// Returns the product of quaternion \p q and scalar \p s.
    friend Quatd
    operator *(const Quatd &q, double s) {
        return Quatd(q) *= s;
    }

    /// Returns the product of quaternion \p q and scalar \p s.
    friend Quatd
    operator *(double s, const Quatd &q) {
        return Quatd(q) *= s;
    }

    /// Returns the product of quaternion \p q and scalar 1 / \p s.
    friend Quatd
    operator /(const Quatd &q, double s) {
        return Quatd(q) /= s;
    }

  private:
    /// Imaginary part
    Vec3d _imaginary;

    /// Real part
    double _real;

    /// Returns the square of the length
    double
    _GetLengthSquared() const {
        return Dot(*this, *this);
    }
};

/// Spherically linearly interpolate between \p q0 and \p q1.
///
/// If the interpolant \p alpha is zero, then the result is \p q0, while
/// \p alpha of one yields \p q1.
GF_API Quatd
Slerp(double alpha, const Quatd& q0, const Quatd& q1);

GF_API Quatd
Slerp(const Quatd& q0, const Quatd& q1, double alpha);

inline double
Dot(Quatd const &q1, Quatd const &q2) {
    return Dot(q1.GetImaginary(), q2.GetImaginary()) +
                 q1.GetReal()*q2.GetReal();
}

/// Output a Quatd using the format (re, i, j, k)
/// \ingroup group_gf_DebuggingOutput
GF_API std::ostream& operator<<(std::ostream &, Quatd const &);

PXR_NAMESPACE_CLOSE_SCOPE

#endif // PXR_BASE_GF_QUATD_H
